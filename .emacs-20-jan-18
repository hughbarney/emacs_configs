;; -*-lisp-*-
;; Time-stamp: <2018-01-20 12:57:12 hugh>
;;
;; Unified .emacs file for GNU emacs, Xemacs, linux, win32 and emacs -nw setups
;; [ Note: Windows XP reports w32 others reports win32 for window-system ]
;;
;;   (setq ediff-diff-options '"")


;; General Settings
;;

(setq inhibit-startup-screen t)            ; dont show the Emacs Window
(setq inhibit-default-init t)              ; override system .emacs
(setq-default auto-save-default nil)       ; no auto save
(setq-default make-backup-files nil)       ; no backup files
(setq-default scroll-step 1)               ; trun off jumpy scroll
(setq-default visible-bell t)              ; no beeps, flash on errors
(transient-mark-mode -1)                   ; no highlight of marked region by default
(show-paren-mode 1)                        ; show matching parenthesis
(setq load-path (cons (expand-file-name "~/.emacs_lisp") load-path))  ;; look in own library first

(display-time)                             ; display the time on modeline
(column-number-mode t)                     ; display the column number on modeline
(setq-default kill-whole-line t)           ; ctrl-k kills whole line if at col 0
(setq-default delete-auto-save-files t)    ; zap auto-save files on writing original
(setq-default fill-column 69)              ; wrap at col 69
;(setq-default tab-width 4)                ; show tabs as 4 cols
(setq-default indent-tabs-mode t)          ; use tabs for indentation
(setq default-major-mode 'text-mode)       ; assume text mode for files not
                                           ; recognised by extension

(setq-default case-fold-search t)          ; searches ignore case
(setq-default next-line-add-newlines nil)  ; dont add newlines at end of buffer
;(setq text-mode-hook 'turn-on-auto-fill)
(setq lisp-indent-offset 2)                ; lisp mode setup
(setq lisp-body-ident 2)
(setq mail-archive-file-name "~/mail/sent")
(setq display-time-mail-file t)            ; dont say Mail all the time on modeline
;(resize-minibuffer-mode)                   ; auto resize minibuf if text wont fit
(put 'narrow-to-region 'disabled nil)      ; allow narrow-to-region
(put 'downcase-region 'disabled nil)       ; make searches case insensitive
(put 'upcase-region 'disabled nil)
(put 'eval-expression 'disabled nil)       ; enable ESC-: eval-expression 
(setq font-lock-maximum-decoration t)      ; use colours in font lock mode
(setq font-lock-maximum-size nil)          ; trun off limit on font lock mode
(add-hook 'find-file-hooks 'my-find-file-hook)  ; setup when a file is loaded
(add-hook 'sql-mode-hook 'my-sql-mode-hook) ; setup when going into sql mode
(add-hook 'c-mode-hook 'customize-cc-mode) ; cc-mode setup
;(add-hook 'c-mode-hook 'customize-java-mode) ; java-mode setup
(add-hook 'java-mode-hook 'customize-java-mode) ; java-mode setup
(add-hook 'write-file-hooks 'time-stamp)
(setq message-log-max nil)
(condition-case nil (kill-buffer "*Messages*") (error nil) ) ; no messages buffer

;;
;; GNU/LINUX specifics
;;
(if (eq system-type 'gnu/linux)
  (progn
    (tool-bar-mode 0)      ;; turn off tool bar (Graphics can be slow over VPN etc)
    (tooltip-mode nil)   ;; turn off those tooltip on mouse etc, they pop up when iconised
    (scroll-bar-mode -1) ;; turn off scroll bars
    (menu-bar-mode -1)
    (global-set-key [delete] `delete-char)
	(set-default-font "Monospace 12")
	);; progn
);; if

;;
;; win32: Windows 95 or NT specifics
;; w32:   Windows XP specifics
;;

(if (or (eq window-system 'w32) (eq window-system 'win32))
 (progn (defvar microsoft-windows t))
 (progn (defvar microsoft-windows nil))
)

(if microsoft-windows
 (progn

   (if (eq window-system 'w32)
	 (progn (setq w32-alt-is-meta nil))   ;; enable alt key on windows XP
	 (progn (setq win32-alt-is-meta nil)) ;; enable alt key on windows 95/NT
	 ) ;; if

   (tool-bar-mode -1)   ;; turn off tool bar (Graphics can be slow over VPN etc)
   (tooltip-mode nil)   ;; turn off those tooltip on mouse etc, they pop up when iconised
   (scroll-bar-mode -1) ;; turn off scroll bars
   (menu-bar-mode -1)
   (column-number-mode t)
   (global-set-key [delete] `delete-char)
   ;(set-default-font "Monospace 12")

   (setq frame-title-format "Emacs: %b")
   (setq icon-title-format "Emacs: %b")
   ;(set-default-font "-*-Courier-normal-r-*-*-13-97-*-*-c-*-*-ansi-")
   ;(set-default-font "-*-Courier-normal-r-*-*-13-*-*-*-c-*-*-iso8859-1")
   ;(set-foreground-color "grey")
   (set-foreground-color "grep3")
   ;(setq ange-ftp-ftp-program-name "c:/bin/emacs-21.3/bin/ftp.exe")
   (setq grep-command "findstr /s /n /i ")
   (setq compile-command "build")
   ;; turn off binary option for diff as it does not work
   ;; with some windows diffs
   (setq ediff-diff-options '"")
   (set-default-font "Monospace 12")
 ) ;; progn
)

;;
;; if we are a windows system (Windows or X)
;; set the frame size
;;
(if (not (eq window-system nil))
  (progn
   (set-frame-height (selected-frame) 45)
   (set-frame-width (selected-frame) 115)
	)
);; if


;;
;; specifics to -nw mode
;;
(if (eq window-system 'nil)
 (progn
   ;; fix backspace
   (define-key global-map "\C-h" `backward-delete-char)
   ;; support for kermit alt key setup over a modem
   (define-key global-map "\C-X\\" `isearch-forward)
   (define-key global-map "\C-X|" `isearch-repeat-forward)
   (define-key global-map "\C-Xg" `goto-line)
   (define-key global-map "\C-Xk" `my-kill-current-buffer)
   (define-key global-map "\C-Xw" `save-buffer)
   (define-key global-map "\C-Xz" `my-delete-line)
   (define-key global-map "\C-Xt" `my-duplicate-line)
 )
)

;;
;; useful function to extend auto-mode-alist
;;
(defun auto-mode (pattern function)
  (setq auto-mode-alist
    (cons (cons pattern function) auto-mode-alist)))

;;
;; html-helper-mode stuff
;;
(autoload 'html-helper-mode "html-helper-mode" "Yay HTML" t)
(setq html-helper-do-write-file-hooks t)

;;
;; extra mode setup
;;
(autoload 'groovy-mode "groovy-mode" "Groovy editing mode." t)
(autoload 'python-mode "python-mode" "Python editing mode." t)
(autoload 'visual-basic-mode "visual-basic-mode" "Visual Basic Mode." t)
(autoload 'html-helper-mode "html-helper-mode" "Yay HTML" t)
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(setq html-helper-do-write-file-hooks t)

;;
;; File/Mode Bindings
;;
(auto-mode "\\.lua$" 'lua-mode)
(auto-mode "\\.html$" 'html-helper-mode)
(auto-mode "\\.jsp$" 'html-mode)
(auto-mode "\\.py$" 'python-mode)
(auto-mode "\\.vb$" 'visual-basic-mode)
(auto-mode "\\.vbs$" 'visual-basic-mode)
(auto-mode "\\.xsl$" 'sgml-mode)
(auto-mode "\\.xslt$" 'sgml-mode)
(auto-mode "\\.js$" 'java-mode)
(auto-mode "\\.groovy$" 'groovy-mode)
(auto-mode "\\.ear$" 'archive-mode)
(auto-mode "\\.war$" 'archive-mode)
(auto-mode "\\.md$" 'markdown-mode)

;;
;; Auto Mode based on #!/bin/xxx
;;

(add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))

;;
;; Setup keys for Traditional  Editor -  Non Incremental Searching Style
;;

;; unbind f1 and f2 keys so we can use them
(global-unset-key [f1])
(global-unset-key [f2])

;;
;;  Setup Functions keys to emulate other editors style of searching
;;
;;  f1 - search forward
;;  f2 - repeat search forward
;;  f3 - search backwards
;;  f4 - repeat search backwards
(global-set-key [f1] 'nonincremental-search-forward)
(global-set-key [f2] 'nonincremental-repeat-search-forward)
(global-set-key [f3] 'nonincremental-search-backward)
(global-set-key [f4] 'nonincremental-repeat-search-backward)

;;
;; load in CUA mode
;;
;(require 'cua)
;; disable by default F12 C-c to enable or toggle
(cua-mode)
(cua-mode)

;; knock out some irritations
(global-unset-key "\C-Xf")        ;; C-X f too easy to hit with C-X C-F
(global-unset-key "\C-X\C-D")	  ;; C-X C-D dired makes this redundant
(global-unset-key (kbd "M-k"))    ;; make Esc-k available
(global-unset-key (kbd "M-m"))    ;; make Esc-m available

;;
;; key bindings
;;
(global-set-key "\C-X\C-B" 'buffer-menu)
(global-set-key "\C-Xb" 'my-cycle-buffers)
(global-set-key "\C-Xn" 'my-cycle-buffers)

(global-set-key "\C-X?" 'describe-key-briefly)
(global-set-key [f7] 'other-window)
(global-set-key [home] 'beginning-of-line)
(global-set-key [end] 'end-of-line)
(global-set-key [(control home)] 'beginning-of-buffer)
(global-set-key [(control end)] 'end-of-buffer)
(global-set-key [(control f1)] `search-forward-regexp)
(global-set-key [(alt f1)] `tags-search)
(global-set-key (kbd "M-k") 'kill-region)
(define-key esc-map [right] 'kill-word)         ;; esc -> kill-word
(define-key esc-map [left] 'backward-kill-word) ;; esc <- backward-kill-word

;;
;; Setup Alt Keys
;;
(global-set-key [(alt home)] `beginning-of-buffer)
(global-set-key [(alt end)] `end-of-buffer)
(global-set-key [(alt right)] `forward-word)
(global-set-key [(alt left)] `backward-word)

(global-set-key [(alt a)] `my-duplicate-line)
(global-set-key [(alt b)] `buffer-menu)
(global-set-key [(alt c)] `clipboard-kill-ring-save)   ; same s copy from menu bar
(global-set-key [(alt d)] `my-delete-line) 
(global-set-key [(alt e)] `call-last-kbd-macro)        ; C-x e
(global-set-key [(alt f)] `find-file)                  ; C-x C-f
(global-set-key [(alt g)] `goto-line)
;; alt h spare
(global-set-key [(alt i)] `clipboard-yank)             ; C-y
;; alt j spare
(global-set-key [(alt k)] `kill-line)                  ; C-k
(global-set-key [(alt l)] `logify)                     ; (logify, kbd macro)
(global-set-key [(alt m)] `my-set-mark-command)        ;
(global-set-key [(alt n)] `my-cycle-buffers)
(global-set-key [(alt o)] `delete-other-windows)       ; C-x 1
(global-set-key [(alt p)] `next-error)                 ; C-x `
(global-set-key [(alt q)] `my-kill-current-buffer)     ; C-x k RET
(global-set-key [(alt r)] `insert-file)                ; C-x i 
(global-set-key [(alt s)] `split-window-vertically)    ; C-x 2 
(global-set-key [(alt t)] `query-replace)              ; ESC-%
(global-set-key [(alt u)] `advertised-undo)            ; C-x u
(global-set-key [(alt v)] `find-file-read-only)        ; C-x 4 r
(global-set-key [(alt w)] `save-buffer)                ; C-x C-S
(global-set-key [(alt y)] `yank)                       ; C-y
;(global-set-key [(alt z)] `iconify-or-deiconify-frame) ; C-z

(setq my-map-f12 (make-keymap))
(define-key global-map [f12] my-map-f12)

(define-key my-map-f12 "a" 'auto-fill-mode)            ; F12-a
(define-key my-map-f12 "b" 'my-toggle-fix-backspace)   ; F12-b
(define-key my-map-f12 "c" 'compile)                   ; F12-c
(define-key my-map-f12 "d" 'my-insert-timestamp)       ; F12-d
(define-key my-map-f12 "e" 'my-edit-dot-emacs)         ; F12-e
(define-key my-map-f12 "f" 'my-load-file-at-line-edit) ; F12-f
(define-key my-map-f12 "v" 'my-load-file-at-line-view) ; F12-v
(define-key my-map-f12 "g" 'my-grep)                   ; F12-g
(define-key my-map-f12 "k" 'my-bold-keyword-toggle)    ; F12-k
(define-key my-map-f12 "l" 'my-toggle-truncate-lines)  ; F12-l
(define-key my-map-f12 "n" 'my-load-notes-file)        ; F12-n
(define-key my-map-f12 "m" 'menu-bar-mode)             ; F12-m
;;(define-key my-map-f12 "p" 'ps-print-buffer)         ; F12-p
(define-key my-map-f12 "p" 'my-load-project-file)      ; F12-p
(define-key my-map-f12 "r" 'my-reload-buffer)          ; F12-r
(define-key my-map-f12 "s" 'ispell-buffer)             ; F12-s
(define-key my-map-f12 "t" 'my-toggle-tabstops)        ; F12-t
(define-key my-map-f12 "i" 'my-insert-import-stmt)     ; F12-i

(defun my-find-file-hook()
 "hgb hooks for when file is loaded"
 (interactive)
 ;; truncate lines for each file openned. We don't do
 ;; this using setq-default as it also effects the minibuffer and I want
 ;; to use resize-minibuffer-mode"
 (setq truncate-lines 1)
 (turn-on-font-lock)       ;; not needed for xemacs
;; (transient-mark-mode -1)  ;; no highlight of marked region by default
)

;;
;; does not report status properly, dont know how to read
;; status of cua-mode
;;
(defun my-toggle-cua-mode()
  "toggle cua-mode and report status"
  (interactive)
  (cua-mode)
)

;;
;; wrapper for set-mark so that we report if CUA-mode is active
;; [does not work as cua-mode now has its own
;; cua-set-mark-command ]
;;
(defun my-set-mark-command()
  "call set-mark-command, warn if CUA-mode is active"
  (interactive)
  (set-mark-command 'nil)
  ;; first check if CUA-mode is loaded at all
  (if (fboundp 'cua-mode)
	(progn
	  ;; if CUA-mode is active then warn
	  (if cua-mode
		(progn (message "WARNING CUA-mode is active"))
		) ;; if CUA-mode
	  ) ;; prog
	) ;; if fbound CUA-mode
)

;; setup cc-mode
(defun customize-cc-mode()	      
  (setq c-default-style "linux")
  (c-set-offset 'substatement-open 0)
  (setq c-basic-offset 8)
  (setq c-indent-level 8)
  (setq comment-column 40)
;;  (setq c-auto-newline t)    ; auto newlines after {}:;  toggle C-C C-T
  (setq indent-tabs-mode t)
  (define-key c-mode-map "\C-m" 'newline-and-indent)
;; c-tab-always-indent
;; Any other value (not `nil' or `t') means always reindent the line
;; and also insert a tab if within a comment, a string, or a
;; preprocessor directive.
;;  (setq c-tab-always-indent nil)
)

(defun customize-java-mode()	      
  (setq c-basic-offset 4)
  (c-toggle-hungry-state -1)
  (c-toggle-auto-state -1)
  (c-set-offset 'inline-open 0)
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'case-label 4) 
  (c-set-offset 'arglist-intro 4) 
  (c-set-offset 'arglist-close 4) 
  (c-set-offset 'arglist-cont 0)
  (c-set-offset 'arglist-cont-nonempty 4)
  ;; make C-L to refontify
  (define-key java-mode-map "\C-l" 'font-lock-fontify-buffer)
;; comment out to avoid auto newline after {
;;  (setq c-hanging-braces-alist '( (block-close . c-snug-do-while)) )
;;  (message "customize-java-mode()")
)

(defun my-delete-line()
 "delete the current line"
 (interactive)
 (beginning-of-line)
 (let ((beg (point))) (forward-line 1) (kill-region beg (point)))
  )

(defun my-duplicate-line()
 "duplicate the current line"
 (interactive)
 (beginning-of-line)
 ;;(let ((beg (point))) (next-line 1) (copy-region-as-kill beg (point)))
 (let ((beg (point))) (forward-line 1) (kill-ring-save beg (point)))
 (yank)
 (next-line -1)
  )

(defun my-kill-current-buffer()
 "kills the current buffer"
 (interactive)
 (kill-buffer (current-buffer))
  )

(defun my-reload-buffer()
  "reload the current file from disk"
  (interactive)
  (setq ofile (buffer-file-name (current-buffer)))
  (kill-buffer (current-buffer))
  (find-file ofile)
  (message ofile)
  )


(defun my-cycle-buffers()
 "cycle round buffers"
 (interactive)
 ;;
 ;; force delete junk buffers, even if don't exit
 ;;
 (condition-case nil (kill-buffer "*Buffer List*") (error nil) )
 (condition-case nil (kill-buffer "*Messages*") (error nil) )
 (condition-case nil (kill-buffer "*info*") (error nil) )
 (condition-case nil (kill-buffer "*Completions*") (error nil) )
 (condition-case nil (kill-buffer "*Apropos*") (error nil) )
 (condition-case nil (kill-buffer "*Help*") (error nil) )
 (condition-case nil (kill-buffer "*vc*") (error nil) )
 (condition-case nil (kill-buffer "*vc-diff*") (error nil) )
 (condition-case nil (kill-buffer "*Ediff Registry*") (error nil) )
 (switch-to-buffer (other-buffer))
 (bury-buffer (current-buffer))
)

(defun my-toggle-truncnate-lines()
 "toggle truncate-lines"
 (interactive)
 (setq truncate-lines (not truncate-lines))
 (redraw-display)
)

(defun my-toggle-tabstops()
 "toggle tab stops between 4 and 8 columns"
 (interactive)
 (if (equal tab-width 4)
   (progn
     (setq tab-width 8)
   )
   (progn
     (setq tab-width 4)
   )
 )
 (redraw-display)
)

(defun my-insert-timestamp()
  "insert the current timestamp"
  (interactive)
  ;;(insert (current-time-string))
  (insert 
	(concat 
	  (substring (current-time-string) 8 10)
	  "-"
	  (substring (current-time-string) 4 7)
	  "-"
	  (substring (current-time-string) 20 24)
	)
  )
)

(defun my-html-quote-pre-text()
  "quote all &, < and > in HTML <pre> style text so that they are not
interpretted in HTML as tags.  This function operates on a region of
text. The region is narrowed operated on and then widened so that all
replacements are only done on that region"
  (interactive)
  (save-excursion)
  (narrow-to-region (mark) (point) )

  ;; change all & to &amp;
  (goto-char (mark))
  (while (search-forward "&" nil t)
    (replace-match "&amp;" nil t))

  ;; change all < to &lt;
  (goto-char (mark))
  (while (search-forward "<" nil t)
    (replace-match "&lt;" nil t))

  ;; change all > to &gt;
  (goto-char (mark))
  (while (search-forward ">" nil t)
    (replace-match "&gt;" nil t))

  (goto-char (mark))
  (insert "<pre>")
  (newline-and-indent)

  (end-of-buffer)
  (newline-and-indent)
  (insert "</pre>")
  (newline-and-indent)

  (widen)
)

;;
;; example so that I can remember how todo this
;; run from command-buffer or call from a lisp function
;; cannot call through Ctrl+J in scratch buffer
;;
(defun my-ask(arg)
  "Ask a question and get answer into a variable called arg"
  (interactive "sMy prompt: \n")
  (message arg))

;;
;; another example that we will keep
;;
(defun tryif(tval)
  (if tval
	(progn
	  (message "TRUE")
	  )
	(progn
	  (message "FALSE")
	  )
	);; if
)

(defun my-grep()
  "run a grep on the variable name under point"
  (interactive)
  (save-excursion)
  (backward-word)
  (setq p1 (point))
  (forward-word)
  (setq p2 (point))
  (setq searchstr (buffer-substring p1 p2))
  (setq grepcmd (concat "grep -ni " searchstr " *.c *.h"))
  (grep grepcmd)
  )

(defun my-edit-filelist()
  "open filelist for editing"
  (interactive)
  (save-excursion)
  (setq my-source-file-buffer (current-buffer))
  (if (or (eq window-system 'w32) (eq window-system 'win32))
	(progn (find-file my-project-filelist-win))
	(progn (find-file my-project-filelist-unix))
	);; if
  (beginning-of-buffer)
  )

(defun my-load-file-at-line-edit()
  (interactive)
  (my-load-file-at-line t)
  )

(defun my-load-file-at-line-view()
  (interactive)
  (my-load-file-at-line nil)
  )

(defun my-load-file-at-line(edit)
  "view filename listed on current line"
  (interactive)
  (save-excursion)
  (beginning-of-line)
  (setq p1 (point))
  (end-of-line)
  (setq p2 (point))
  (setq projfile (buffer-substring p1 p2))
  (if edit
	(progn (find-file projfile))
	(progn (find-file-read-only projfile))
	);; if
  (condition-case nil (kill-buffer "filelist.txt") (error nil) )
  (message "loaded %s" projfile)
  )

(defun my-load-notes-file()
 "load my notes file"
  (interactive)
  (if (or (eq window-system 'w32) (eq window-system 'win32))
	(progn
	  (find-file my-notes-file)
	  (find-file my-notes-dir)
	  )
	(progn (find-file my-notes-file-unix1))
	(progn (find-file my-notes-file-unix2))
	);; if
)

(defun my-edit-dot-emacs()
 "edit my .emacs file"
  (interactive)
  ;; works on Windows provided HOME=c:/xxx set for the root of emacs
  (find-file "~/.emacs")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; seperating ALT and META on X-Windows
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
;; ! PROBLEM: The Alt/Meta key binding on X Windows and PCs often
;; ! bound togther.
;; !
;; ! $ xmodmap   # check the output and bindings
;; ! xmodmap:  up to 4 keys per modifier, (keycodes in parentheses):
;; !
;; ! shift       Shift_L (0x32),  Shift_R (0x3e)
;; ! lock        Caps_Lock (0x42)
;; ! control     Control_L (0x25),  Control_R (0x69)
;; ! mod1        Alt_L (0x40),  Meta_L (0xcd)
;; ! mod2        Num_Lock (0x4d)
;; ! mod3      
;; ! mod4        Super_L (0x85),  Super_R (0x86),  Super_L (0xce),  Hyper_L (0xcf)
;; ! mod5        ISO_Level3_Shift (0x5c),  Mode_switch (0xcb)
;; !
;; ! # The problem here is that mod1 bound to Alt and Meta, they need to be
;; ! # seperated. Also:
;; !
;; ! $ xmodmap -pke |grep Meta  ## check the actual keys
;; ! keycode  64 = Alt_L Meta_L Alt_L Meta_L
;; ! keycode 205 = NoSymbol Meta_L NoSymbol Meta_L
;; !
;; ! # we can see that Alt_L and Meta are bound to key 64
;; ! # so they have to be split as well
;; ! # note that ! is the xmodmap comment symbol
;; ! SOLUTION: use the following scipt in  .xmodmaprc or .Xmodmap
;; 
;; clear mod1
;; clear mod3
;; keycode 64 = Alt_L Alt_L Alt_L Alt_L
;; add mod1 = Alt_L
;; add mod3 = Meta_L
;;
;; On Ubuntu 14.04 xmodmap is no longer used
;; have to force it to be run on Gnome start up
;; append the following line to ~/.profile
;; (sleep 4; /usr/bin/xmodmap ~/.Xmodmap)&
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;
;; Make Emacs understand Ant's output.
;; http://www.skybert.nu/files/emacs/.emacs-java
;;
(require 'compile)
(setq compilation-error-regexp-alist
		(append
		 (list
		  ;; works for jikes
		  '("^\\s-*\\[[^]]*\\]\\s-*\\(.+\\):\\([0-9]+\\):\\([0-9]+\\):[0-9]+:[0-9]+:" 
			 1 2 3)
		  ;; works for javac
		  '("^\\s-*\\[[^]]*\\]\\s-*\\(.+\\):\\([0-9]+\\):" 1 2))
		 compilation-error-regexp-alist))

;;
;; font lock schemes
;;
(require 'color-theme)
(if microsoft-windows
 (progn (load "my-color-theme-win32.el"))
 (progn (load "my-color-theme.el"))
)

;(my-color-theme)
;;(load "my-macros.el")

(add-to-list 'load-path "/home/hugh/Gits/magit")
(eval-after-load 'info
  '(progn (info-initialize)
          (add-to-list 'Info-directory-list "/home/hugh/Gits/magit/")))
(require 'magit)
(global-set-key (kbd "M-m") 'magit-status)


(require 'markdown-mode)

;; load emacs 24's package system. Add MELPA repository.
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t))


;(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 ;'(custom-safe-themes (quote ("8db4b03b9ae654d4a57804286eb3e332725c84d7cdab38463cb6b97d5762ad26" default))))
;(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 ;)

(deftheme solarized-dark "The dark variant of the Solarized colour theme")
;;(create-solarized-theme 'dark 'solarized-dark)
(provide-theme 'solarized-dark)
